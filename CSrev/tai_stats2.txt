## let's try to rebuild our old stats pipeline. 

## in one week. 

## shit.

## start with controls, cleanup of biom table

## to startup:

## biomsetup.R
##############################

library('phyloseq')
library('DESeq2')
library('vegan')
library('cooccur')
library('igraph')
library('ecodist')
library('ade4')
library('png')

biom95 <- import_biom('combo_otu_wMeta.biom', parseFunction=parse_taxonomy_greengenes)

neg95 <- subset_samples(biom95, sample_names(biom95)=='Neg')

##############################

source("biomsetup.R")

## start looking for tag switching

reads <- taxa_sums(neg95)[taxa_sums(neg95) > 0]

reads <- sort(reads, decreasing = TRUE)
sink('neg95names.txt') ## read out these OTUs so we can use them in python env
names(reads)
sink()

sed 's/\[.*\]//g' neg95names.txt |sed 's/^\s*//g' | sed 's/\s\+/,/g' | sed '$s/,$/\)/' | sed '1s/\"OTU/mcseq=\(\"OTU/' > neg95list.txt

## python script to blast our negative controls against our positive control 
## sequences:

## MCseq.py
## make sure line breaks are removed from fastas

with open('otus_95_combo_nolb.fasta', 'r') as zoop:
        refseq = zoop.readlines()

with open('mcseq.txt', 'w') as goop:
        for j,otu in enumerate(mcseq):
                for i,line in enumerate(refseq):
                        if otu in line:
                                goop.write(line)
                                goop.write(refseq[i+1])


##############

cat neg95list.txt MCseq.py > makeMCseq.py

cat neg95list.txt MCseq.py 

python3 makeMCseq.py

grep "OTU" neg95list.txt 

grep -o "OTU" neg95list.txt | wc -l ## 43

grep "^>" mcseq.txt | wc -l ## 43

## check in bash:

aa=(OTU167:Dc-X OTU315:4w OTU306:Dc-PosG OTU386:Dc-PosG\
OTU187:Dc-PosG OTU891:1w OTU762:Dc-X OTU1214:9w \
OTU1747:11w OTU164:Dc-PosG OTU1332:11w OTU2003:Neg \
OTU560:Dc-PosG OTU1444:49w OTU256:Dc-X OTU1432:2w \
OTU1549:104w OTU6852:Neg OTU417:1w OTU84:38w \
OTU1599:9w OTU2831:5w OTU46:60w OTU2115:131w \
OTU119:Dc-PosG OTU220:Dc-PosG OTU235:Dc-PosG OTU264:Dc-PosG\
OTU1183:36w OTU64:1w OTU409:4w OTU437:1w \
OTU18:9w OTU414:13w OTU655:1w OTU2029:2w \
OTU250:4w OTU7329:38w OTU925:133w OTU1496:23w \
OTU588:32w OTU1888:25w OTU972:130w)

for i in ${aa[@]}; do
echo $i
grep $i otus_95_combo_nolb.fasta
done

## looks like a comma missing, or something like that:

## OTU386:Dc-PosGOTU187:Dc-PosG
## OTU264:Dc-PosGOTU1183:36w

## had to fix these manually. 

## anyway, onward...

aa=$(find . -type f -name "BioI-6098_OConnor_34875.seq.txt")

## Shell kernel
## reformat, blast

sed '/^>/ s/;size=.*//' mcseq.txt | sed '/^>/ s/;size=.*//' mcseq.txt > mockseqs_Neg95.fasta

blastn -query mockseqs_Neg95.fasta -db mcsanger.fasta -out mcblast_Neg95.txt -num_descriptions 3 -num_alignments 3
blastn -query mockseqs_Neg95.fasta -db mcsanger.fasta -out mcblast_Neg95.csv -outfmt 10 -max_target_seqs 1
sed '1 i\qseqid,sseqid,pident,length,mismatch,gapopen,qstart,qend,sstart,send,evalue,bitscore' mcblast_Neg95.csv -i
sed 's/_ITS[1,4],/,/g' mcblast_Neg95.csv -i
sed 's/Sample//g' mcblast_Neg95.csv -i

R

source("biomsetup.R")

blast <- read.csv("mcblast_Neg95.csv", stringsAsFactors=FALSE)
goodblast <- blast[blast$pident > 94 & blast$length > 90,]

reads <- taxa_sums(neg95)[taxa_sums(neg95) > 0]
reads <- sort(reads, decreasing = TRUE)
Neg95.gen <- tax_table(neg95)[names(reads),6] ## genus, from initial tax assignments
Neg95.gen[is.na(Neg95.gen)] <- "NoID"
Neg95.species <- tax_table(neg95)[names(reads),7] ## species, from initial tax assignments
Neg95.species[is.na(Neg95.species)] <- "NoID"
member <- names(reads) %in% goodblast$qseqid ## membership in mock community (probably tag-switchers)
MC <- vector(length = length(reads)); MC[] <- 0 ## empty vector, for MC sample #, filled below

Neg95bar <- data.frame(reads, member, MC, Neg95.gen, Neg95.species, stringsAsFactors=FALSE) ## dataframe

##fill the mock community sample number by querying our csv from blast results

colnames(Neg95bar)[1] <- "reads"
for (i in 1:nrow(Neg95bar)){
        if (rownames(Neg95bar)[i] %in% goodblast$qseqid) {
                search <- grep(rownames(Neg95bar)[i], goodblast$qseqid)
                Neg95bar$MC[i] <- goodblast$sseqid[search]
        }
    }


source("biomsetup.R")

aa95 <- subset_samples(biom95, sample_names(biom95) == 'PosI')
danITSreads <- taxa_sums(aa95)[taxa_sums(aa95) > 0]
danITSreads <- sort(danITSreads, decreasing = TRUE)
sink('danITSreads.txt') ## read out these OTUs so we can use them in python env
names(danITSreads)
sink()


## days later, checking on WvsL nms:
load('nmsmat.rda')
WvsL <- metaMDS(nmsmat)

## super high separation. I wonder why the separation is so much cleaner this time?

## Maybe because I cleaned up more index bleed by
## removing the contaminants separately, leaves and 
## wood at different times. 

## Were we running an analysis based on index bleed?

## look more closely....


## make a color vector, leaves green, wood brown:
color <- NULL
color[1:91] <- 'brown'
color[92:214] <- 'green'

plot(WvsL$points, col=color)

## outlier:

identify(WvsL$points)

## 181, which is?

WvsL$points

WvsL$points[181,,drop=FALSE] ## 67leaf, which is...

sample_data(biom95)['67leaf',] ## Machilus thunbergii, as before

## what happened to the other outlier? Maybe it will pop up.

## let's run the NMS without this:

## get two otu tables out, one for all wood samples, one for all leaf samples:
load('deseq95.rda')

## phyloseq objects
wood95 <- subset_samples(deseq95, Library=='W')
leaf95 <- subset_samples(deseq95, Library=='L')
leaf95_noOut <- prune_samples(sample_names(leaf95) !='67leaf', leaf95)
## make otu tables
woodOTU <- otu_table(wood95, taxa_are_rows=TRUE)
leafOTU_noOut <- otu_table(leaf95_noOut, taxa_are_rows=TRUE)
dim(woodOTU); dim(leafOTU_noOut)
nmsmat <- rbind(woodOTU, leafOTU_noOut)

## nope, need to remove that sample after making the matrix...

load('nmsmat.rda')

dim(nmsmat)
## remove the 67leaf row:

which(rownames(nmsmat) == '67leaf')

nmsmat_noOut <- nmsmat[-181,]

WvsL <- metaMDS(nmsmat_noOut)

color <- NULL
color[1:91] <- 'brown'
color[92:214] <- 'green'
plot(WvsL$points, col=color)

## this means we can't base our analysis on shared reads....

## or we go back and figure out what happened. 

## maybe both - go forward as is, if none of the old 
## analyses make sense anymore, go back and look at this
## more closely....

load('leafMDS.rda')

load('deseq95.rda')
leafbiom  <- subset_samples(deseq95, Library=='L')
leafOTU <- otu_table(leafbiom)
leaf <- t(leafOTU@.Data)
leaf_data <- sample_data(leafbiom)
samps <- table(leaf_data$Host_genus_species)
spp <- names(samps)

hostspp <- sapply(leaf_data$Host_genus_species, FUN= function(x){which(spp == x)})
#spp == sort(unique(leaf_data$Host_genus_species)) ## yup, table function does this
n <- length(spp)
palette <- distinctColorPalette(n)
plot(leafMDS$points,
        col="black",
        pch = 21,
        bg = palette[hostspp]
)

aa <- identify(leafMDS$points)
leafMDS$points[aa,,drop=FALSE]


################

sample_names(deseq95)

aa  <- subset_samples(deseq95, sample_names(deseq95) != '67leaf')

bb  <- prune_samples(sample_names(deseq95) != '67leaf', deseq95)






#############3

## setup the old beast optiplex for cooccur....

scp ./host_woodOTU_mat.rda daniel@192.168.1.7:/home/daniel/Documents/submissions/taibioinfo/taiwan_combined_stats/CSrev/

## get this running while we construct the next cooc

woodcooc <- cooccur(host_woodOTU_mat, spp_names=TRUE) 

## and back to the notebook

scp daniel@192.168.1.7:/home/daniel/Documents/submissions/taibioinfo/taiwan_combined_stats/CSrev/

source('biomsetup.R')

load('deseq95.rda')
woodPA <- subset_samples(deseq95, Library == 'W')
leafPA <- subset_samples(deseq95, Library == 'L')
leafOTU <- otu_table(leafPA) ## extract otu table matrix
leafOTU[leafOTU > 0] <- 1 ## convert to P/A
leafOTU -> otu_table(leafPA) ## put it back in
woodOTU <- otu_table(woodPA) ## same with wood
woodOTU[woodOTU > 0] <- 1
woodOTU -> otu_table(woodPA)
leafPA <- prune_taxa(rowSums(otu_table(leafPA)) > 0, leafPA) ## get rid of empty taxa
woodPA <- prune_taxa(rowSums(otu_table(woodPA)) > 0, woodPA)
aa <- names(taxa_sums(leafPA))
bb <- names(taxa_sums(woodPA))
venn.diagram(list(Leaf = aa, Wood = bb),
        fill = c("green", "brown"),
        alpha = c(0.3, 0.7),
        cex = 2,
        cat.fontface = 4,
        fontfamily =3,
        imagetype = 'png',
        filename='overallvenn.png',
        )


## how do we get a taxonomic table for our core 
## fungi?

## leaves:

source('biomsetup.R')

load(file= 'helleaffung.rda')
load('deseq95.rda')

str(tax_table(deseq95))

tax_table(deseq95)[helleaffung,]

sum(rownames(tax_table(deseq95)) %in% helleaffung)

all(helleaffung %in% rownames(tax_table(deseq95)))


rownames(tax_table(deseq95)) %in% helleaffung

tax_table(deseq95)

dim(tax_table(deseq95)[helleaffung,])

## get this into a text file:

sink("leafCoreTax.txt")
tax_table(deseq95)[helleaffung,]
sink()


load('deseq95.rda')
## make our dataframe of spatial coordinates and BC index:
wood95 <- subset_samples(deseq95, Library == 'W') ## general wood phyloseq obj
woodHel95 <- subset_samples(wood95, Host_genus_species == 'Helicia_formosana') ## helicia only
woodXY <- sample_data(woodHel95)[,c('X','Y')] ## get positions
topo <- readPNG('/home/daniel/Documents/taiwan/taiwan_combined_stats/topo.png') ## load scanned image of Fushan Map
plot(1, type='n',
        xlim=c(0,500),
        ylim=c(0,500),
        xlab = '',
        ylab = '',
        asp=1,
        #main='Helicia formosana leaves, comparison to Hilltop'
) ##blank plot
rasterImage(topo,0,0,500,500) ## add raster of our plot
points(woodXY,
        pch=21,
        cex=1.5,
        bg = 'green',
        lwd=1.5,
        )


load('deseq95.rda')
leaf95 <- subset_samples(deseq95, Library == 'L') ## general leaf phyloseq obj
leafOTU <- t(otu_table(leaf95))
leafOTU[leafOTU > 0] <- 1
leafMDS <- metaMDS(leafOTU)
allBC <- as.matrix(vegdist(leafOTU))[,"72leaf", drop=FALSE]
allBCroundup <- round(allBC*100+1) ## turn our allBC values into heatmap values
my_palette2 <- colorRampPalette(c("green","yellow","blue"))(n = 101)

plot(leafMDS$points,
        pch=21,
        bg = my_palette2[allBCroundup[,1]],
        asp=1
)

identify(leafMDS$points)


############### blast the cores #############

## we need to get a better handle on the taxonomy 
## of our core OTUs. 

## for this we need their sequences...where do these live 
## again? 

## for leaf core mycobiome:

## still in R:

load(file= 'helleaffung.rda')
sink("leafCore.txt")
helleaffung
sink()

## use this to make a list of sequences to fetch, in python:

######## leafCoreFindseq.py ###########

#!/usr/bin/env python3

coreSeq=("OTU19:","OTU202:","OTU10:","OTU17:",
 "OTU15:","OTU27:","OTU94:","OTU91:",
 "OTU239:","OTU16:","OTU199:","OTU678:")

with open('otus_95_combo_nolb.fasta', 'r') as zoop:
        refseq = zoop.readlines()

with open('seqs_leafCoreMycobiom.fasta', 'w') as goop:
        for j,otu in enumerate(coreSeq):
                for i,line in enumerate(refseq):
                        if otu in line:
                                goop.write(line)
                                goop.write(refseq[i+1])

## run it

./leafCoreFindseq.py

## now, blast these on our local copy of UNITE:

## our local UNITE version lives at:
UNITE='/home/daniel/Documents/taiwan/UNITE/sh_general_release_dynamic_01.12.2017.fasta'
leafCoreSeqs='/home/daniel/Documents/taiwan/taiwan_combined_stats/CSrev/seqs_leafCoreMycobiom.fasta'
Udir='/home/daniel/Documents/taiwan/UNITE/'
CSrev='/home/daniel/Documents/taiwan/taiwan_combined_stats/CSrev'

## need to make a blasteable database out of this...

cd $Udir

makeblastdb -in sh_general_release_dynamic_01.12.2017.fasta -parse_seqids -dbtype nucl
## doesn't work. Apparently 
## Neotyphodium_×siegelii
## is causing a problem

## try on optiplex? 
## from optiplex:

scp daniel@192.168.1.4:/home/daniel/Documents/taiwan/UNITE/sh_general_release_dynamic_01.12.2017.fasta ./

scp daniel@192.168.1.4:/home/daniel/Documents/taiwan/taiwan_combined_stats/CSrev/seqs_leafCoreMycobiom.fasta ./

makeblastdb -in sh_general_release_dynamic_01.12.2017.fasta -parse_seqids -dbtype nucl

## nope

## does SED see this?

cp sh_general_release_dynamic_01.12.2017.fasta unite.copy.fasta
chmod 777 unite.copy.fasta
grep "×" unite.copy.fasta
sed -i '/_×/ s/×//g' unite.copy.fasta

makeblastdb -in unite.copy.fasta -parse_seqids -dbtype nucl
## coredumps

makeblastdb -in unite.copy.fasta  -dbtype nucl
## -parse_seqids not used, is this a problem?
## let's see. 

UNITE='/home/daniel/Documents/taiwan/UNITE/unite.copy.fasta'

cd $CSrev

cd $Udir

blastn -query $leafCoreSeqs -db $UNITE -out leafCoreMycobiom_blast.txt -num_descriptions 10 -num_alignments 10



load(file= 'helwoodfung.rda')
sink("woodCore.txt")
helwoodfung
sink()

## blast wood core:
blastn -query $woodCoreSeqs -db $UNITE -out woodCoreMycobiom_blast.txt -num_descriptions 10 -num_alignments 10

## same for the wood, done in the notebook. 

## so now what?

## we need a new table of IDs that we feel most confident. 

## how to do this?

## go through them one-by-one, pick the best or consensus match  

## method: manual blast is given priority, over the initial, high-throughput 
## assignments given by usearch. 

## 1. 
## If several high quality matches in the manual blast 
## are available that agree on a taxonomic assignment, use
## this at the finest resolution possible, however broad.  

## 2. 
## If a single very strong BLAST match exists (ex - 97%+ agreement
## on 100+ BP), even if there isn't other evidence for it.

## 3. 
## If the two searchs, BLAST and USEARCH agree in some way, 
## this also strongly suggests a taxonomic assignment, even if 
## there are not numerous BLAST matches to corroborate

## 4.
## Otherwise, no assignment is given. Weak assignments that 
## seem plausible can be shown in parentheses. 


## because of the strong disagreement in numerous places
## between BLAST and USEARCH, 

leaves, bestIDmanual, 
OTU10 , Phyllosticta
OTU15 , Phyllosticta capitalensis
OTU16 , Phyllosticta
OTU17 , NoHit
OTU19 , Clavicipitaceae (Metarhizium?)
OTU27 , Ascomycota (Sordariomycetes?)(Dothideomycetes?)
OTU91 , NoHit
OTU94 , NoHit (Basidiomycota, Pucciniomycotina)
OTU199, NoHit (Chytridiomycota?)
OTU202, NoHit
OTU239, NoHit
OTU678, NoHit (Dermatocarpon?, Phaeoisaria?)


wood
OTU84 , Chaetothyriales 
OTU250, NoHit (Dermatocarpon) 
OTU257, Trichomeriaceae 
OTU269, NoHit (Tremellales)
OTU287, NoHit
OTU352, Chaetothyriales 
OTU726, Capnodiales

## put this into markdown tables

|OTU | ID
|---|--|
|OTU10 | *Phyllosticta* |
|OTU15 | *Phyllosticta capitalensis* |
|OTU16 | *Phyllosticta* |
|OTU17 | NoHit |
|OTU19 | Clavicipitaceae (*Metarhizium*?) |
|OTU27 | Ascomycota (Sordariomycetes?)(Dothideomycetes?) |
|OTU91 | NoHit |
|OTU94 | NoHit (Basidiomycota, Pucciniomycotina) |
|OTU199 | NoHit (Chytridiomycota?) |
|OTU202 | NoHit |
|OTU239 | NoHit |
|OTU678 | NoHit (*Dermatocarpon*?, *Phaeoisaria*?) |


## wood

|OTU | ID
|---|--|
| OTU84  | Chaetothyriales 
| OTU250 | NoHit (*Dermatocarpon*) 
| OTU257 | Trichomeriaceae 
| OTU269 | NoHit (Tremellales)
| OTU287 | NoHit
| OTU352 | Chaetothyriales 
| OTU726 | Capnodiales

## leaf
|Taxa|Kingdom|Phylum|Subphylum|Class|Order|Family|Genus|Species
|----|-------|------|---------|-----|-----|------|-----|-------
|OTU10  | Fungi | Ascomycota | Pezizomycotina | Dothideomycetes | Botryosphaeriales | *Phyllosticta* |
|OTU15  | Fungi | Ascomycota | Pezizomycotina | Dothideomycetes | Botryosphaeriales | *Phyllosticta capitalensis* |
|OTU16  | Fungi | Ascomycota | Pezizomycotina | Dothideomycetes | Botryosphaeriales | *Phyllosticta* |
|OTU17  | Fungi | 
|OTU19  | Fungi | Ascomycota | Pezizomycotina | Sordariomycetes | Hypocreales | Clavicipitaceae |
|OTU27  | Fungi | Ascomycota | 
|OTU91  | Fungi | 
|OTU94  | Fungi | 
|OTU199 | Fungi | 
|OTU202 | Fungi | 
|OTU239 | Fungi | 
|OTU678 | Fungi | 


## wood
|Taxa|Kingdom|Phylum|Subphylum|Class|Order|Family|Genus|Species
|----|-------|------|---------|-----|-----|------|-----|-------
| OTU84  | Fungi | Ascomycota | Pezizomycotina | Eurotiomycetes | Chaetothyriales 
| OTU250 | Fungi | 
| OTU257 | Fungi | Ascomycota | Pezizomycotina | Eurotiomycetes | Chaetothyriales | Trichomeriaceae 
| OTU269 | Fungi | 
| OTU287 | Fungi | 
| OTU352 | Fungi | Ascomycota | Pezizomycotina | Eurotiomycetes | Chaetothyriales 
| OTU726 | Fungi | Ascomycota | Pezizomycotina | Dothideomycetes | Capnodiales


## BC table, last results for the analysis:


[1] "Helicia, core fungi, leaves:"

0.383548761116857
0.167949494026408

[1] "Helicia, core fungi, wood:"

0.377571947052467
0.171537476539615


organ | all hosts, all endophytes  | *Helicia*, all-endophytes  | *Helicia*, core-fungi      | *Helicia*, non-core        |
------|----------------------------|----------------------------|----------------------------|----------------------------|
leaf  | 0.897(<sup>+</sup>/-0.088) | 0.799(<sup>+</sup>/-0.107) | 0.383(<sup>+</sup>/-0.168) | 0.885(<sup>+</sup>/-0.078) |
wood  | 0.874(<sup>+</sup>/-0.069) | 0.804(<sup>+</sup>/-0.061) | 0.378(<sup>+</sup>/-0.172) | 0.833(<sup>+</sup>/-0.063) |

## looks good. 

## next, fill in the commentary on the new notebook. 

####################

## I think I need to redo the varpart afterall.
## let's see what we can do in a half hour without internet

## leaves: 

source('biomsetup.R')
load("deseq95.rda") ## phyloseq object
leaf95 <- subset_samples(deseq95, Library=="L") ## subset biom to leaf

## get a dataframe of the positions of points:
leafxy <- sample_data(leaf95)[,c('X', 'Y')]
rownames(leafxy) <- gsub("leaf.*","", rownames(leafxy) )
leafxy <- data.frame(leafxy[order(as.numeric(rownames(leafxy))),])
leafxy$X <- as.numeric(leafxy$X)
leafxy$Y <- as.numeric(leafxy$Y)

#save(leafxy, file="leafxy.rda")
#load("leafxy.rda")

## we need a leaf environmental dataframe with matching order


leaf.env <- sample_data(leaf95)[,c('Forest_Type', 'vegcom')] ## fix weird rownames and order:
rownames(leaf.env) <- gsub("leaf.*","",rownames(leaf.env))
leaf.env <- data.frame(leaf.env[order(as.numeric(rownames(leaf.env))),])
leaf.env$Forest_Type <- as.factor(leaf.env$Forest_Type)
leaf.env$vegcom <- as.factor(leaf.env$vegcom)

## checks
rownames(leaf.env) 
rownames(leafxy) 
all(rownames(leafxy) == rownames(leaf.env))
all(rownames(leaf.env) %in% rownames(leafxy) )
all(rownames(leafxy) %in% rownames(leaf.env) )

#save(leaf.env, file="leaf.env.rda") 
#load("leaf.env.rda") 

## already saved the PCNMs and transformed community matrix. 
load("leafPCNM.rda") ## spatial patterns of variation
load("leafcom.hel.rda") ## our community matrix of leaf endophyhytes, presence/absence  transformed then hellinger-transformed

## check for broad spatial trends with the raw positions

leaf.XY.rda <- rda(leafcom.hel, leafxy)
anova.cca(leaf.XY.rda)

# Permutation test for rda under reduced model
# Permutation: free
# Number of permutations: 999
# 
# Model: rda(X = leafcom.hel, Y = leafxy)
#           Df Variance      F Pr(>F)   
# Model      2  0.01764 1.2194   0.01 **
# Residual 120  0.86818                 
# ---
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

## okay, as usual, very low variance explained, but statistically
## significant. 

## find out which direction is causing this:

mod0 <- rda(leafcom.hel ~ 1, leafxy)
mod1 <- rda(leafcom.hel ~ ., leafxy)
step.res <- ordiR2step(mod0, mod1, perm.max = 1000)
step.res$anova

##                    R2.adj Df     AIC      F Pr(>F)
## + X             0.0026216  1 -13.251 1.3207  0.012 *
## <All variables> 0.0035841
## ---
## Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

## looks like some sort of east-west trend, but REALLY weak

## load it up with our PCNMs, see if it clarifies spatial
## trends:

spat <- cbind(leafxy$X, leafPCNM)
rownames(spat) <- rownames(leafPCNM)
colnames(spat)[1] <- 'XX'

mod0 <- rda(leafcom.hel ~ 1, spat)
mod1 <- rda(leafcom.hel ~ ., spat)
step.res <- ordiR2step(mod0, mod1, perm.max = 1000)

step.res$anova

##                    R2.adj Df     AIC      F Pr(>F)
## + XX            0.0026216  1 -13.251 1.3207  0.010 **
## + X8            0.0051270  1 -12.581 1.3047  0.010 **
## + X34           0.0072663  1 -11.875 1.2586  0.022 *
## + X9            0.0093039  1 -11.166 1.2448  0.028 *
## + X7            0.0113712  1 -10.470 1.2467  0.026 *
## <All variables> 0.0127785
## ---
## Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

## very little variation explained. as per last time. 

## and as per last time the raw positions (X and y) explain
## very little and add very little to variance explained.

## so for simplicity we'll leave them out, and just use the PCNM vectors

## next?

## check environmental effects
mod0 <- rda(leafcom.hel ~ 1, leaf.env)
mod1 <- rda(leafcom.hel ~ ., leaf.env)
step.res <- ordiR2step(mod0, mod1, perm.max = 1000) 

## environmental effects explain no variance. 

## host? make the matrix:

leafhost <- as.factor(sample_data(leaf95)$Host_genus_species)
names(leafhost) <- gsub("leaf[AB]?","",rownames(sample_data(leaf95)))
leafhost <- leafhost[order(as.numeric(names(leafhost)))]
#save(leafhost, file='leafhost.rda')

all(names(leafhost) == rownames(leafPCNM)) ## check to see if the ordering worked

## check 

rda(leafcom.hel ~ leafhost) ## 26% variance explained

anova(rda(leafcom.hel ~ leafhost)) ## but not significant. 

## well, that's unexpected, and different - why did this happen?

## I think it's the same story. I was stricter in my cutoffs, in how I
## applied them in this pipeline. So after the transformations I 
## there is just not enough information left, we're underpowered. 
## That's my best guess, because we do have a lot of variance 
## explained here, similar to last time.
## but really, I'd need an expert here. 

## I think we just need to remove the varpart from the analysis, 
## we don't have enough data to do it properly. And the reviewers
## said to stop emphasizing the inconclusive/negative results. 

## should we do the wood varpart? What's the use if its not accompanied 
## by a leaf analysis?

## nope. Get this out and stop letting it ruin your nights. There are 
## many other projects that can do that next...


##############################

## make some nice network diagrams:

source('biomsetup.R')

load('graphcooc_wood.rda')

vcols <- vector(length = length(V(graphcooc_wood)))
vcols[] <- 'gray'
vcols[which(names(V(graphcooc_wood)) == "Helicia_formosana")] <- "red"
vcols[which(names(V(graphcooc_wood)) == "Myrsine_seguinii")] <- "darkgreen"
aa <- adjacent_vertices(graphcooc_wood, "Helicia_formosana", mode = c("all"))[[1]]
vcols[V(graphcooc_wood) %in% aa] <- "lightpink" ## color first-degrees purple
bb <- adjacent_vertices(graphcooc_wood, "Myrsine_seguinii", mode = c("all"))[[1]]
vcols[V(graphcooc_wood) %in% bb] <- "lightgreen" ## color first-degrees purple
helwoodfung <- names(aa) ## useful below, in mapping of core mycobiomes

#svg('wood_cooccur.svg')
plot(graphcooc_wood, 
     vertex.color = vcols, 
     vertex.size = 8, 
     vertex.label = NA, 
     edge.color = 'black')
#dev.off()

## sweet. 



############################
## repeat with leaves:

load(file = 'graphcooc_leaf.rda')

vcols <- vector(length = length(V(graphcooc_leaf)))
vcols[] <- 'gray'
vcols[which(names(V(graphcooc_leaf)) == "Helicia_formosana")] <- "red"
vcols[which(names(V(graphcooc_leaf)) == "Blastus_cochinchinensis")] <- "blue"
vcols[which(names(V(graphcooc_leaf)) == "Limlia_uraiana")] <- "orange"
aa <- adjacent_vertices(graphcooc_leaf, "Helicia_formosana", mode = c("all"))[[1]]
vcols[V(graphcooc_leaf) %in% aa] <- "lightpink" ## color first-degrees purple
bb <- adjacent_vertices(graphcooc_leaf, "Blastus_cochinchinensis", mode = c("all"))[[1]]
vcols[V(graphcooc_leaf) %in% bb] <- "lightblue" ## color first-degrees purple
cc <- adjacent_vertices(graphcooc_leaf, "Limlia_uraiana", mode = c("all"))[[1]]
vcols[V(graphcooc_leaf) %in% cc] <- "yellow" ## color first-degrees purple
helleaffung <- names(aa)

#svg('leaf_cooccur.svg')
plot(graphcooc_leaf, 
     vertex.color = vcols, 
     vertex.size = 8, 
     vertex.label = NA, 
     edge.color = 'black')
#dev.off()

## okay, what do we need to do for these figures? 
## Legend. 
## Title and caption.



#####################3

## how many wood otus vs leaf?

load('deseq95.rda')

leafbiom  <- subset_samples(deseq95, Library=='L')
sum(rowSums(otu_table(leafbiom)) > 0)

woodbiom  <- subset_samples(deseq95, Library=='W')
sum(rowSums(otu_table(woodbiom)) > 0)


##########################

## composition, dig back in a litte:


source("biomsetup.R")

load('deseq95.rda')
woodPA <- subset_samples(deseq95, Library == 'W')
leafPA <- subset_samples(deseq95, Library == 'L')
leafOTU <- otu_table(leafPA) ## extract otu table matrix
leafOTU[leafOTU > 0] <- 1 ## convert to P/A
leafOTU -> otu_table(leafPA) ## put it back in
woodOTU <- otu_table(woodPA) ## same with wood
woodOTU[woodOTU > 0] <- 1
woodOTU -> otu_table(woodPA)
leafPA <- prune_taxa(rowSums(otu_table(leafPA)) > 0, leafPA) ## get rid of empty taxa
woodPA <- prune_taxa(rowSums(otu_table(woodPA)) > 0, woodPA)

leafclasstable <- table(tax_table(leafPA)[,"Class"])/nrow(otu_table(leafPA))
woodclasstable <- table(tax_table(woodPA)[,"Class"])/nrow(otu_table(woodPA))
leafclassvector <- as.vector(leafclasstable); names(leafclassvector) <- names(leafclasstable)
woodclassvector <- as.vector(woodclasstable); names(woodclassvector) <- names(woodclasstable)
## which classes that are in leaves are not observed in wood? and vice-versa:
notinwoodclassvector <- names(leafclassvector)[!(names(leafclassvector) %in% names(woodclassvector))]
notinleafclassvector <- names(woodclassvector)[!(names(woodclassvector) %in% names(leafclassvector))]
## match up the membership and order of these vectors so we can rbind them 
notinwood <- vector(length=length(notinwoodclassvector))
notinwood[] <- 0; names(notinwood) <- notinwoodclassvector
fullwoodclassvector <- c(woodclassvector,notinwood)
notinleaf <- vector(length=length(notinleafclassvector))
notinleaf[] <- 0; names(notinleaf) <- notinleafclassvector
fullleafclassvector <- c(leafclassvector,notinleaf)
fullwoodclassvector <- fullwoodclassvector[names(fullleafclassvector)] ## match order

## we can simplify. 

## put them in a matrix together
bothclass <- rbind(fullleafclassvector, fullwoodclassvector)
## round
bothclass <- round(bothclass, digits = 3)
## drop the zeros, and any column that lacks 
## a value with at least 1% in either leaf or wood:
bothclass <- bothclass[,colSums(bothclass < 0.01) < 2]
colnames(bothclass)[7] <- "Pezizomycotina incertae sedis"

svg("Class_bargraph.svg")
par(mar=c(15,3,3,2)) # increase y-axis margin.
#barplot(bothclasstable, 
barplot(bothclass,
        las=2,
        ylim = c(0,0.5),
        #main='Marxist critique: Class differences',
        beside=TRUE,
        col = c('green','brown'),
        )
legend('topright',
        fill = c('green','brown'),
        legend= c('leaf','wood')
        )
dev.off()



########## remake host NMS graphics ############

## wood

load('deseq95.rda')

woodbiom  <- subset_samples(deseq95, Library=='W')
woodOTU <- otu_table(woodbiom)
wood <- t(woodOTU@.Data) ## transpose, default phyloseq uses otus as rows
wood_data <- sample_data(woodbiom)
WoodMDS <- metaMDS(wood)
samps <- table(wood_data$Host_genus_species)
hisamps <- samps[samps > 2] ## only hosts with >2 samples
hihosts <- wood_data$Host_genus_species %in% names(hisamps)
## make new groups/color palette
hispp <- names(hisamps)
hihostspp <- sapply(wood_data$Host_genus_species[hihosts], FUN= function(x){which(hispp == x)})
n <- length(hispp)
palette <- distinctColorPalette(n)

load('woodHostMDS.rda')

svg('woodHost.svg')
plot(WoodMDS$points[hihosts,],
    col="black",
    pch = 21,
    bg = palette[hihostspp],
    #xlim = c(-0.15,.35),
)
legend( x=.13,
    y=0.15,
    legend=hispp,
    fill=palette,
    bty='n')
## hulls have to be drawn one by one if we use ordihull():
for(i in 1:length(hispp)){
ordihull(WoodMDS, groups=wood_data$Host_genus_species, show.groups=hispp[i], col=palette[i])
}
dev.off()

#save(WoodMDS, file = 'woodHostMDS.rda')

##### leaf Host nms ###########

load('deseq95.rda')
leafbiom  <- subset_samples(deseq95, Library=='L')
leafOTU <- otu_table(leafbiom)
leaf <- t(leafOTU@.Data)
leaf_data <- sample_data(leafbiom)
leafMDS <- metaMDS(leaf)

#save(leafMDS, file='leafHostMDS.rda')

## host groups/colors
samps <- table(leaf_data$Host_genus_species)
spp <- names(samps)
hostspp <- sapply(leaf_data$Host_genus_species, FUN= function(x){which(spp == x)})
#spp == sort(unique(leaf_data$Host_genus_species)) ## yup, table function does this

hisamps <- samps[samps > 2] ## only hosts with >2 samples
hihosts <- leaf_data$Host_genus_species %in% names(hisamps)
## make new groups/color palette
hispp <- names(hisamps)
hihostspp <- sapply(leaf_data$Host_genus_species[hihosts], FUN= function(x){which(hispp == x)})
n <- length(hispp)
palette <- distinctColorPalette(n)

svg('leafHost.svg')
plot(leafMDS$points[hihosts,],
        col="black",
        pch = 21,
        bg = palette[hihostspp]
)
length(hihosts); dim(leafMDS$points)
legend("topleft",
    legend=hispp,
    fill=palette,
    bty='n',
      )
for(i in 1:length(hispp)){
ordihull(leafMDS, groups=leaf_data$Host_genus_species, show.groups=hispp[i], col=palette[i])
}
dev.off()


############# PCNMs #####################

## get the valley pcnms into svg

## leaves:

source("biomsetup.R")
source("/home/daniel/Documents/taiwan/taiwan_combined_stats/CSrev/NEwR-2ed_code_data/NEwR2-Functions/sr.value.R")

load("leafHelxy.rda")
load("leafHelPCNM.rda")
mapP <- function(PCNM, P, bkg){
        require('png')
        topo <- readPNG(bkg) ## load scanned image of Fushan Map
        plot(1, type='n', 
                xlim=c(0,500), 
                ylim=c(0,500),
                xlab = '',
                ylab = '',
        main = paste('PCNM',colnames(PCNM)[P], sep = ' ')
        ) ##blank plot
        rasterImage(topo,0,0,500,500)
       sr.value(dfxy=leafHelxy,
        z=PCNM[,P],
#        clegend = 0, ## gets rid of legends, they can get in the way
        add.plot = TRUE,
)
}

## supp fig:

svg('leafFullPCNM.svg')
par(mfrow=c(2,2))
for (i in 1:ncol(leafHelPCNM)){mapP(leafHelPCNM,i,'/home/daniel/Documents/taiwan/taiwan_combined_stats/topo.png')}
par(mfrow=c(1,1))
dev.off()


## and just the valley PCNM

svg('leafValleyPCNM.svg')
par(mfrow=c(1,1))
mapP(leafHelPCNM,1,'/home/daniel/Documents/taiwan/taiwan_combined_stats/topo.png')
dev.off()


## wood all PCNM supp:

## gotta rebuild XY?

load('deseq95.rda')
woodHel95 <- subset_samples(deseq95, Library == 'W' & Host_genus_species == "Helicia_formosana")
woodHelxy <- sample_data(woodHel95)[,c('X', 'Y')]
rownames(woodHelxy) <- gsub("w","",rownames(woodHelxy))
woodHelxy <- data.frame(woodHelxy[order(as.numeric(rownames(woodHelxy))),])
woodHelxy$X <- as.numeric(woodHelxy$X)
woodHelxy$Y <- as.numeric(woodHelxy$Y)

#save(woodHelxy, file = 'woodHelxy.rda')

source("biomsetup.R")

source("/home/daniel/Documents/taiwan/taiwan_combined_stats/CSrev/NEwR-2ed_code_data/NEwR2-Functions/sr.value.R")
load("woodHelxy.rda")
load("woodHelPCNM.rda")

mapP <- function(PCNM, P, bkg){
        require('png')
        topo <- readPNG(bkg) ## load scanned image of Fushan Map
        plot(1, type='n', 
                xlim=c(0,500), 
                ylim=c(0,500),
                xlab = '',
                ylab = '',
        main = paste('PCNM',colnames(PCNM)[P], sep = ' ')
        ) ##blank plot
        rasterImage(topo,0,0,500,500)
       sr.value(dfxy=woodHelxy,
        z=PCNM[,P],
#        clegend = 0, ## gets rid of legends, they can get in the way
        add.plot = TRUE,
)
}

svg('woodFullPCNM.svg')
par(pty="s") ## square plot
par(mfrow=c(1,2))
for (i in 1:ncol(woodHelPCNM)){mapP(woodHelPCNM,i,'/home/daniel/Documents/taiwan/taiwan_combined_stats/topo.png')}
par(mfrow=c(1,1))
dev.off()


svg('woodValley.svg')
par(mfrow=c(1,1))
par(pty="s") ## square plot
mapP(woodHelPCNM,1,'/home/daniel/Documents/taiwan/taiwan_combined_stats/topo.png')
dev.off()

######## BC distance to valley community graphic:

load('deseq95.rda')
load("leafHelxy.rda")
leafHel95 <- subset_samples(deseq95, Library == 'L' & Host_genus_species == "Helicia_formosana")
woodHel95 <- subset_samples(deseq95, Library == 'W' & Host_genus_species == "Helicia_formosana")

## sample 104, at 180,51. 

## leaves:
bb <- t(otu_table(leafHel95)) ## get otu table for Helicia leaves
bb[bb > 0] <- 1 ## presence/absence
cc <- vegdist(bb, method='bray') ## makes a triangular association matrix 
dd <- as.matrix(cc) ## convert to full, symmetric matrix
#leafhelvalBC <- dd[,'131leaf'] ## extract only the comparisons to our Helicia sample of choice
leafhelvalBC <- dd[,'104leaf'] ## extract only the comparisons to our Helicia sample of choice
all(names(leafhelvalBC) == rownames(sample_data(leafHel95))) ## worked
## map a dataframe with the info we want to plot:
mapBC <- cbind(sample_data(leafHel95)[,c('X','Y')], leafhelvalBC)
colnames(mapBC)[3] <- 'BC'
## order by BC dissimilarity
mapBC <- mapBC[order(mapBC$BC),]
mapBCrev <- mapBC[rev(rownames(mapBC)),]
## make a heat map palette useing colorbrewer
my_palette2 <- colorRampPalette(c("green","yellow","blue"))(n = 101)
## need an "adapter", for our BC values to this heat map color scheme: 
BCroundup <- rev(round(mapBC$BC*100+1))
## leaves

svg('helleafBCvalley.svg')
plot(1, type='n',
        xlim=c(0,500),
        ylim=c(0,500),
        xlab = '',
        ylab = '',
        asp=1,
        main='Helicia formosana leaf endophytes, comparison to one valley point'
) ##blank plot
topo <- readPNG('/home/daniel/Documents/taiwan/taiwan_combined_stats/topo.png')
rasterImage(topo,0,0,500,500) ## add raster of our plot
## add Helicia points, colored by similarity
points(mapBCrev[,c('X','Y')],
        pch=21,
        cex=1.5,
        bg = my_palette2[BCroundup],
        lwd=1.5,
        )
## circle point of comparison
points(mapBCrev['104leaf',c('X','Y')],
        pch=1,
        cex=3,
        col='red',
        lwd = 3,
        )
heatlegend <- vector(length=11)
heatlegend[] <- ''
heatlegend[1] <- '0'
heatlegend[6] <- '0.5'
heatlegend[11] <- '1.0'
legend(
#        "topright",
        x=420,
        y=500,
        fill = my_palette2[seq(1,101,10)],
        legend = heatlegend,
        bg = "white",
        y.intersp = 0.5,
)
dev.off()

#points(mapBCrev['104leaf',c('X','Y')],
#        pch=1,
#        cex=3,
#        col='red',
#        lwd = 3,
#        )

###### wood, helicia valley comparison:

rm(list=ls())


load('deseq95.rda')
load("woodHelxy.rda")
leafHel95 <- subset_samples(deseq95, Library == 'L' & Host_genus_species == "Helicia_formosana")
woodHel95 <- subset_samples(deseq95, Library == 'W' & Host_genus_species == "Helicia_formosana")

## sample 104, at 180,51. 
bb <- t(otu_table(woodHel95)) ## get otu table for Helicia wood
bb[bb > 0] <- 1 ## presence/absence
cc <- vegdist(bb, method='bray') ## makes a triangular association matrix 
dd <- as.matrix(cc) ## convert to full, symmetric matrix
#woodhelvalBC <- dd[,'131wood'] ## extract only the comparisons to our Helicia sample of choice
woodhelvalBC <- dd[,'104w'] ## extract only the comparisons to our Helicia sample of choice
ll(names(woodhelvalBC) == rownames(sample_data(woodHel95))) ## worked
## map a dataframe with the info we want to plot:
mapBC <- cbind(sample_data(woodHel95)[,c('X','Y')], woodhelvalBC)
colnames(mapBC)[3] <- 'BC'
## order by BC dissimilarity
mapBC <- mapBC[order(mapBC$BC),]
mapBCrev <- mapBC[rev(rownames(mapBC)),]
## make a heat map palette useing colorbrewer
my_palette2 <- colorRampPalette(c("green","yellow","blue"))(n = 101)
## need an "adapter", for our BC values to this heat map color scheme: 
BCroundup <- rev(round(mapBC$BC*100+1))
## wood

svg('helwoodBCvalley.svg')
plot(1, type='n',
        xlim=c(0,500),
        ylim=c(0,500),
        xlab = '',
        ylab = '',
        asp=1,
        main='Helicia formosana wood endophytes, comparison to one valley point'
) ##blank plot
topo <- readPNG('/home/daniel/Documents/taiwan/taiwan_combined_stats/topo.png')
rasterImage(topo,0,0,500,500) ## add raster of our plot
## add Helicia points, colored by similarity
points(mapBCrev[,c('X','Y')],
        pch=21,
        cex=1.5,
        bg = my_palette2[BCroundup],
        lwd=1.5,
        )
points(mapBCrev['104w',c('X','Y')],
        pch=1,
        cex=3,
        col='red',
        lwd = 3,
        )
heatlegend <- vector(length=11)
heatlegend[] <- ''
heatlegend[1] <- '0'
heatlegend[6] <- '0.5'
heatlegend[11] <- '1.0'
legend(
#        "topright",
        x=420,
        y=500,
        fill = my_palette2[seq(1,101,10)],
        legend = heatlegend,
        bg = "white",
        y.intersp = 0.5,
)
dev.off()



######### leaf core BC distance graphic ############

load('deseq95.rda') 
load('helleaffung.rda') ## our list of strongly associated Helicia leaf fungi
leafHel95 <- subset_samples(deseq95, Library == 'L' & Host_genus_species == "Helicia_formosana")

## get the BC distance of all helicia points from the core:
aa <- t(otu_table(leafHel95))
aa <- aa[,helleaffung] ## subset OTU to just these rows
aa[aa > 0] <- 1 ## PA
leafXY <- sample_data(leafHel95)[,c('X','Y')] ## spatial coords
aaNo0 <- aa[rowSums(aa) > 0,] ## get rid of zero rows, for nms
core <- vector(length=ncol(aa)); core[] <- 1 ## our "core" mycobiome
leafHelcoreOTU <- rbind(core, aa) ## stack them, including zeroes (for map)
leafHelcoreOTUno0 <- rbind(core, aaNo0) ## stack them, not including zeroes (for NMS)
bray <- as.matrix(vegdist(leafHelcoreOTU)) ## comparisons of mutally zero rows go to NA
leafHelcoreBC <- bray['core',-1] ## use core comparison, but remove core entry to match sample_data
coreBCroundup <- round(leafHelcoreBC*100+1) ## turn our BC values into heatmap values
core_palette2 <- colorRampPalette(c("green","yellow","blue"))(n = 101) ## colors for plot

svg('HelCoreLeafBC.svg')
topo <- readPNG('/home/daniel/Documents/taiwan/taiwan_combined_stats/topo.png') ## load scanned image of Fushan Map
plot(1, type='n',
        xlim=c(0,500),
        ylim=c(0,500),
        xlab = '',
        ylab = '',
) ##blank plot
rasterImage(topo,0,0,500,500)
points(leafXY,
        pch=21,
        cex=2,
        bg = core_palette2[coreBCroundup],
        lwd=1.5,
        )
#draw.circle(x=183,y=223, radius=200, border="red",lwd=2, lty = 2)
heatlegend <- vector(length=11)
heatlegend[] <- ''
heatlegend[1] <- '0'
heatlegend[6] <- '0.5'
heatlegend[11] <- '1.0'
legend("topright",
        fill = core_palette2[seq(1,101,10)],
        legend = heatlegend,
        bg = "white",
        y.intersp = 0.5,
)
dev.off()








load('helwoodfung.rda') ## our list of strongly associated Helicia wood fungi, 'helwoodfung'
woodHel95 <- subset_samples(deseq95, Library == 'W' & Host_genus_species == "Helicia_formosana")
## get the BC distance of all helicia points from the core:
aa <- t(otu_table(woodHel95))
aa <- aa[,helwoodfung] ## subset OTU to just these rows
aa[aa > 0] <- 1 ## PA
woodXY <- sample_data(woodHel95)[,c('X','Y')] ## get positions
## for jittering, might be useful to fully convert the positions:
woodHelXY <- data.frame(cbind(as.numeric(woodXY$X), as.numeric(woodXY$Y)))
colnames(woodHelXY) <- woodXY@names
core <- vector(length=ncol(aa)); core[] <- 1 ## our "core" mycobiome
woodHelcoreOTU <- rbind(core, aa) ## stack them, including zeroes (for map)
bray <- as.matrix(vegdist(woodHelcoreOTU)) ## comparisons of mutally zero rows go to NA
woodHelcoreBC <- bray['core',-1] ## use core comparison, but remove core entry to match sample_data
coreBCroundup <- round(woodHelcoreBC*100+1) ## turn our BC values into heatmap values
core_palette2 <- colorRampPalette(c("green","yellow","blue"))(n = 101) ## colors for plot

svg('HelCoreWoodBC.svg')
topo <- readPNG('/home/daniel/Documents/taiwan/taiwan_combined_stats/topo.png') ## load scanned image of Fushan Map
plot(1, type='n',
        xlim=c(0,500),
        ylim=c(0,500),
        xlab = '',
        ylab = '',
        asp=1
) ##blank plot
rasterImage(topo,0,0,500,500)
#points(woodXY,            ## no jitter
points(cbind(jitter(woodHelXY$X,40), jitter(woodHelXY$Y,40)), ## jitter
        pch=21,
        cex=2,
        bg = core_palette2[coreBCroundup],
        lwd=1.5,
        )
heatlegend <- vector(length=11)
heatlegend[] <- ''
heatlegend[1] <- '0'
heatlegend[6] <- '0.5'
heatlegend[11] <- '1.0'
legend("topright",
        fill = core_palette2[seq(1,101,10)],
        legend = heatlegend,
        bg = "white",
        y.intersp = 0.5,
)
dev.off()

######### BC chart ###################

load('deseq95.rda')
## leaves, at large:
    leaf95 <- subset_samples(deseq95, Library == 'L')
    leafOTU <- t(otu_table(leaf95))
    leafOTU[leafOTU > 0] <- 1
    aa <- c(vegdist(leafOTU))
    BClist <- aa
    namez <- rep('leaf95', length(aa))
## wood, at large:
    wood95 <- subset_samples(deseq95, Library == 'W')
    woodOTU <- t(otu_table(wood95))
    woodOTU[woodOTU > 0] <- 1
    aa <- c(vegdist(woodOTU))
    BClist <- c(BClist, aa)
    namez <- c(namez, rep('wood95', length(aa)))
## leaves, for Helicia:
    leafHel95 <- subset_samples(deseq95, Library == 'L' & Host_genus_species == "Helicia_formosana")
    leafOTU <- t(otu_table(leafHel95))
    leafOTU[leafOTU > 0] <- 1
    aa <- c(vegdist(leafOTU))
    BClist <- c(BClist, aa)
    namez <- c(namez, rep('leafHel95', length(aa)))
## wood, for Helicia:
    woodHel95 <- subset_samples(deseq95, Library == 'W' & Host_genus_species == "Helicia_formosana")
    woodOTU <- t(otu_table(woodHel95))
    woodOTU[woodOTU > 0] <- 1
    aa <- c(vegdist(woodOTU))
    BClist <- c(BClist, aa)
    namez <- c(namez, rep('woodHel95', length(aa)))
## Helicia-only, core, wood, avg BC
    woodHel95 <- subset_samples(deseq95, Library == 'W' & Host_genus_species == "Helicia_formosana")
    load('helwoodfung.rda')
    ## get the average BC of all helicia wood points from this core:
    aa <- t(otu_table(woodHel95))
    aa <- aa[,helwoodfung] ## subset OTU to just these rows
    aa[aa > 0] <- 1 ## PA
    aa <- c(vegdist(aa)) ## 
    BClist <- c(BClist, aa)
    namez <- c(namez, rep('woodHel95core', length(aa)))
## Helicia-only, non-core, wood, avg BC
    aa <- t(otu_table(woodHel95))
    aa <- aa[,!(colnames(aa) %in% helwoodfung)] ## get rid of cores
    aa[aa > 0] <- 1 ## PA
    aa <- c(vegdist(aa)) ## 
    BClist <- c(BClist, aa)
    namez <- c(namez, rep('woodHel95nocore', length(aa)))
## helicia-only, leaves, core
    leafHel95 <- subset_samples(deseq95, Library == 'L' & Host_genus_species == "Helicia_formosana")
    load('helleaffung.rda')
    ## get the average BC of all helicia leaf points from this core:
    aa <- t(otu_table(leafHel95))
    aa <- aa[,helleaffung] ## subset OTU to just these rows
    aa <- aa[rowSums(aa)>0,] ## remove zero sum rows
    aa[aa > 0] <- 1 ## PA
    aa <- c(vegdist(aa)) ## 
    BClist <- c(BClist, aa)
    namez <- c(namez, rep('leafHel95core', length(aa)))
## Helicia-only, non-core, leaf, avg BC
    aa <- t(otu_table(leafHel95))
    aa <- aa[,!(colnames(aa) %in% helleaffung)] ## get rid of cores
    aa[aa > 0] <- 1 ## PA
    aa <- c(vegdist(aa)) ## 
    BClist <- c(BClist, aa)
    namez <- c(namez, rep('leafHel95nocore', length(aa)))

bcp <- data.frame(BClist,namez)
## control the plotting order:
bcp$namez <- factor(bcp$namez, levels=c('leaf95',
                                        'wood95',
                                        'leafHel95',
                                        'leafHel95core',
                                        'leafHel95nocore',
                                        'woodHel95',
                                        'woodHel95core',
                                        'woodHel95nocore'
                                        ))

## control the box size, make proportions a little more 
## realistic:
levelProportions <- c(123, 91, 31,15.5,15.5,22,11,11)/100
names(levelProportions) <- c('leaf95', 'wood95', 'leafHel95', 'leafHel95core', 'leafHel95nocore', 'woodHel95', 'woodHel95core', 'woodHel95nocore')

svg('BCcompare.svg')
par(mar=c(10,3,4,2)) # increase y-axis margin.
    boxBC <- boxplot(BClist~namez, data=bcp,
    las = 2,
    width = levelProportions
    )
dev.off()

## just curious, where is our most unique point, that is on average most different from the 
## others? 

## leaves:

## leaves, at large:
    leaf95 <- subset_samples(deseq95, Library == 'L')
    leafOTU <- t(otu_table(leaf95))
    leafOTU[leafOTU > 0] <- 1
    leafdiff <- as.matrix(vegdist(leafOTU))

aa <- rowSums(leafdiff) / nrow(leafdiff - 1)

min(aa) ## the most similar site, 

which(aa == min(aa)) 

plot(sort(aa))

aa['120leaf']

## where is this?

sample_data(deseq95)['120leaf']
## limlia, at (41, 40). SW valley. huh. 

## how about Helicia?

leafHel95 <- subset_samples(deseq95, Library == 'L' & Host_genus_species == "Helicia_formosana")
leafOTU <- t(otu_table(leafHel95))
leafOTU[leafOTU > 0] <- 1
leafdiff <- as.matrix(vegdist(leafOTU))
aa <- rowSums(leafdiff) / nrow(leafdiff - 1)

## also works, not sure why diagonal is disregarded:
apply(leafdiff, 1, mean)

min(aa) ## the most similar site, 

## most similar
bb <- names(which(aa == min(aa))) ## 97leaf
sample_data(deseq95)[bb]

## most different:
cc <- names(which(aa == max(aa))) ## 3 leaf
sample_data(deseq95)[cc]
## this is at 361, 221, swampy central area
## kind of makes sense. 

## Anyway, back to the paper


plot(sort(aa))
